workflows:
  react-native-android:
    name: React Native Android
    max_build_duration: 120
    instance_type: mac_mini_m2
    environment:
      android_signing:
        - shanyai-key
      # groups:
      #   - google_play
      vars:
        PACKAGE_NAME: "co.event.scanner"
    scripts:
      - name: Set Android SDK location
        script: | 
          echo "sdk.dir=$ANDROID_SDK_ROOT" > "$CM_BUILD_DIR/android/local.properties"
      - name: Install npm dependencies
        script: | 
          npm install
      - name: Run Expo Prebuild
        script: | 
          npx expo prebuild
      - name: Set up app/build.gradle
        script: | 
          mv ./support-files/build.gradle android/app
      - name: Build Android release
        script: | 
          LATEST_GOOGLE_PLAY_BUILD_NUMBER=$(google-play get-latest-build-number --package-name "$PACKAGE_NAME")
          if [ -z $LATEST_GOOGLE_PLAY_BUILD_NUMBER ]; then
              UPDATED_BUILD_NUMBER=$BUILD_NUMBER
          else
              UPDATED_BUILD_NUMBER=$(($LATEST_GOOGLE_PLAY_BUILD_NUMBER + 1))
          fi
          cd android
          ./gradlew bundleRelease \
            -PversionCode=$UPDATED_BUILD_NUMBER \
            -PversionName=2.0.$UPDATED_BUILD_NUMBER
    artifacts:
      - android/app/build/outputs/**/*.aab
    publishing:
      email:
        recipients:
          - user_1@example.com
          - user_2@example.com
        notify:
          success: true
          failure: false
      # google_play:
      #   credentials: jjkk
      #   track: internal
      #   submit_as_draft: true


  react-native-ios:
    name: React Native iOS
    max_build_duration: 120
    instance_type: mac_mini_m2
    integrations:
      app_store_connect: ShanyaiApiKey
    environment:
      ios_signing:
        distribution_type: app_store
        bundle_identifier: co.event.scanner
      vars:
        BUNDLE_ID: "co.event.scanner"
        XCODE_WORKSPACE: "shanyaieventsv4.xcworkspace" # <-- Put the name of your Xcode workspace here
        XCODE_SCHEME: "shanyaieventsv4" # <-- Put the name of your Xcode scheme here
        APP_STORE_APPLE_ID: 1632812193
    scripts:
      - name: Install npm dependencies
        script: | 
          npm install
      - name: Run Expo Prebuild
        script: | 
          npx expo prebuild
      - name: Set Info.plist values
        script: | 
          PLIST=$CM_BUILD_DIR/$XCODE_SCHEME/Info.plist
          PLIST_BUDDY=/usr/libexec/PlistBuddy
          $PLIST_BUDDY -c "Add :ITSAppUsesNonExemptEncryption bool false" $PLIST
      - name: Install CocoaPods dependencies
        script: | 
          cd ios && pod install
      - name: Set up provisioning profiles settings on Xcode project
        script: xcode-project use-profiles
      - name: Increment build number
        script: | 
          cd $CM_BUILD_DIR/ios
    
          # Set the desired major and minor version
          DESIRED_MAJOR_MINOR_VERSION="2.0"
          
          # Get the latest build number from App Store Connect
          LATEST_BUILD_NUMBER=$(app-store-connect get-latest-app-store-build-number "$APP_STORE_APPLE_ID" 2>&1)

          # Extract the patch version (last segment)
          CURRENT_PATCH_VERSION=$(echo "$LATEST_BUILD_NUMBER" | awk -F '.' '{print $NF}')

          # Check if the patch version is numeric
          if [[ "$CURRENT_PATCH_VERSION" =~ ^[0-9]+$ ]]; then
              NEXT_PATCH_VERSION=$(($CURRENT_PATCH_VERSION + 1))
          else
              echo "Error: CURRENT_PATCH_VERSION is not numeric or missing. Defaulting to 40."
              NEXT_PATCH_VERSION=40
          fi

          # Combine major, minor, and patch to create the full version
          FULL_VERSION="$DESIRED_MAJOR_MINOR_VERSION.$NEXT_PATCH_VERSION"

          # Log the version details
          echo "Setting marketing version (CFBundleShortVersionString) to $FULL_VERSION"
          echo "Setting build number (CFBundleVersion) to $FULL_VERSION"

          # Update CFBundleShortVersionString (marketing version)
          agvtool new-marketing-version $FULL_VERSION

          # Update CFBundleVersion (build number) to match the full version
          agvtool new-version -all $FULL_VERSION

          # Verify the changes
          echo "Updated version details in Info.plist:"
          defaults read $CM_BUILD_DIR/ios/$XCODE_SCHEME/Info.plist | grep "CFBundle"
      - name: Build ipa for distribution
        script: | 
          xcode-project build-ipa \
            --workspace "$CM_BUILD_DIR/ios/$XCODE_WORKSPACE" \
            --scheme "$XCODE_SCHEME"
    artifacts:
      - build/ios/ipa/*.ipa
      - /tmp/xcodebuild_logs/*.log
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.app
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
    publishing:
      email:
        recipients:
          - batiemc@gmail.com
        notify:
          success: true
          failure: false
      app_store_connect:
        auth: integration

        # Configuration related to TestFlight (optional)
        # Note: This action is performed during post-processing.
        submit_to_testflight: true
        beta_groups: # Specify the names of beta tester groups that will get access to the build once it has passed beta review.
          - group name 1
          - group name 2

        # Configuration related to App Store (optional)
        # Note: This action is performed during post-processing.
        submit_to_app_store: false